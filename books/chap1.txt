Принципы работы системы автоматического построения

	Модульное программирование 
	При работе над проектом разработчкики сталкиваются со следующими проблемами:
1.Время компиляции.При увеличиении объема исходного кода растет и время, требуемое для его компиляции.
В модели каскадного процесса разработки ПО, этап кодирования и тестиования заключается во внесении изменений 
в исходный код, его компиляцию, запуск тестовой проргаммы, выявление багов, внесение изменений, повторная компиляция и тд.
Таким образом , вполне вохможно, что большая часть времени будет уходить на завершение компиляции.
2.Организация коллективной работы над проектом.Если проект требует больших трудозатрат, желательно выделить для его выполнения 
группу из нескольких человек, работающую одновременно.
3.Грамотная организация исходного кода.При увеличиении объема исходного кода вполне может оказаться так, что разобраться в нем 
будет уже невозможно.Поэтому данная проблема встает перед разрабами.
4.Повторное использование кода.При разработке компонентов которые могут быть использованы повторно, возникает задача их оформления 
в виде, удобном для повторного использования.Для ранее разработанных компонентов, возникает задача встраивания в текущий проект.
	Для решения всех перечисленных задач предназначен подход, называемый модульным программированием.В соответствии с ним исходный код 
проекта разбивается на части, называемые исходными, или транслируемыми модулями.Между модулями устанавливаются зависимости по вызываемым 
подрограммам, доступ к глобальным переменным, определенным в других модулях.Например, в c/с++ средстсвами межмодульного взаимодействия 
являются ф-ции и переменные с внешней связью(имеющие объявление с ключевым словом extern).
Рисунок 1.1 представляет схему двухэтапного построения проекта.
	Процедура создания конечного исполняемого двоичного файла пр модульном подходе разделяется на два этапа.На первом для каждого транслируемого
модуля независимо от остлаьных запускается компилятор, который создает объектный файл.Как правило, объектные модули представляют собой почти полностью 
скомпилированные версии исходных модулей, но имеют одну особенность.При вызове ф-ций и при обращении к переменным в машинных командах используются адреса 
этих объектов. При обращении к ф-ции, определенной вне текущего модуля, компилятор не может знать адрес и поэтому вставляет в объектный код ссылки на их символические 
имена-имена, построенные некоторым образом на основе имени этого объекта в исходном коде.Каждый объектный модуль содержит таблицу имеорта-набор символичесих имен 
объектов их других модулей, используемых в текущем.Также объектный модуль модержит таблицу экспорта-набор имен объектов, которые предоставляет из текущего модуля.
	На втором этапе все бъектные модули передаются компоновщику.Он собирает из них исполняемый модуль,осуществляя разрешение зависимостей-просмотр таблиц импорта/экспорта-набор
и замену ссылок на симаолические имена реальными адресами(которые уже должны быть известны, поскольку он выполняет разрешение в памяти всех ф-ций и переменных)
	Кроме объектных модулей компоновщку также могут передаваться библиотеки, как правило, представляющие собой несколько объектных модулей, объединенных для удобства в один файл.
Именно так организованны стандартные библиотеки, которые неявно используются компоновщиком.
	При помощи разбиения исходного кода на модули решаются задачи организации соллективной работы, грамотная организация исходного кода и его повторное использование.Но как решить 
задачу ускорения компиляии?Описанная процедура двухэтапного построения не быстрее обычного.Иногда даже используется приме называемый монолитным построением(предкомпилированные файлы), когда все транслируемые модули
подключаются из одного при помощи #include и компилятору передается этот единственный модуль.
	Однако описанный здесь процесс двухэтапного построения может сочетаться с методом, который иногда называют инкрементным построением.Согласно ему при внесении изменений в какие-то 
транслируемые модули для повторного построения необходимо заново перекомпилировать только эти измененные модули, а также,возможно, модули которые от них зависят.При этом если в модуле был изменен 
только внутренний код каких-то ф-ций, но не из заголовок, зависимые модули можно не трогать.Изменение заголовков ф-ций ведет к перекомпиляции зависимых модулей.Работа компоновщика, как правило, 
осуществялется гораздо быстрее сложного процесса компиляции,поэтому здесь может быть достигнута значительная экономия времени.
	Автоматизация построения проектов
	Описанное двуэтапное построение может быть реализовано вручную, однако на практике это очень неудобно.Автоматически этот процесс может быть реализован на основе сравнения даты изменения исходного 
и зависимого файла.
Замечание:для программных проектов схема построения может быть более общей, чем на рисунке 1.1.Одни файлы могут создаваться из других при помощи некоторых инструментов(не обязательно компилятора).
Например,приложения, использующие набор библиотек qt, могут вызывать его инструменты, генерирующие промежуточный код на с++.Вместо одного исполняемого модуля может создаваться несколько конечных целей.
Например при помощи различных инструментов может генерироваться файл справки ил документациик коду.Концепция автоматизированного двухэтапного построения лекго распространяется и на такие случаи.
	Таким образом, описанние построения программного проекта должно включать в себя информацию о следующих его копонентах:
	
	1.Входные файлы:исходные файла проекта(транслируемые модули, графические изображения и тд), которые создаются и редактируются разрабом.
	2.Промежуточные файлы:вспомогательные файлы, создаваемые в процессе построения проекта(объектные модули и тд)
	3.Выходные файлы:результирующие файлы, представляющие собой конечный результат построения(имполняемые модули, библи и тд)
	4.Правила вызова инструметов:описание того, какой внешний инструмент (компилятор, компоновщик и тд) с какими аргументами должен вызываться для получения одних файлов из других.
	5.Цель:файл, создаваемый в результате исполнения правила

Зависимости проекта:описание того, какие промежуточные и выходные файлы проекта зависят от входных, промежуточных и выходных и как правила должны быть применены для создания этих файлов.Таким образом , зависимости 
ациклический граф с врешинами, соответствующими файлам проекта, и дугами, соответсвующими правилам.Инструмент построеня должен уметь сравнивать время изменения сгенерированного файла с временем изменения файлов, от 
которых он зависит.Если сремя изменения какого-либо из них окажется позже времени изменения зависимого файла(или он еще не существует), он должен быть создан заново применением соответсвующего правила.

Описание проекта:описание зависимостей проекта для инструмента построения в одном или нескольких файлах.
	Инструмент автматического построения должен уметь выполнять две операции:
1.Инкрементное построение:процесс создания всех выходных файлов проекта с применением правил только при необходимости(с учетом времени изменения файлов и их существования)
2.Полное построение(перестроение):применение всех опсанных правил для создания выходных файлов без учета времени изменения файлов.
	Последняя операция может быть полезна в ряде случаев, например:
-Изменение системного времени на компе, на котором выполняется построение, из-за чего механизм проверки времени изменения файлов перестает быть надежным средством определения необходимости примененя правил.
-Проверка повторяемости построения проекта с выявлением некоторых типичных ошибок.Например,из проекта могут быть ошибочно удалены некоторые исходные файлы, в то время как созданные ранее по ним объектники
до сих пор существуют на диске и использются при инкреметном построении выходных файлов.Попытка построить проект на другом компе в этом случае будет неудачной.
	Еще одной возможностью, которую предоставляют некоторые инструменты построения, является построение вне каталога проекта(out-of source build).Эти инструменты дают возможность выполнять построение таким образом, чтобы все
промежуточные и выходные файлы создавались в так называемом каталоге построения,отдельном от каталога исходных файлов проекта(каталог проекта).При этом каталог исходных файлов не захламаляется большим количеством 
генерируемых файлов, обычно занимающих очень много места.
	В заврешении обсуждения автоматизации построения осталось обсудить вопрос, каким образом средства построеня могут определить транслируемые модули, зависимые от измененного, которые также нужно перекомпилировать.Для 
этого рассмотрим пример:
	Пусть в проекте имеется исходный модуль a.cpp на с++, в котором определена экспортируемая ф-ция f():
	
void f(){}

	Пусть в проекте имеется модуль b.cpp, который вызывает ф-цию f(), импортируемую из модуля a.cpp:
	
	void g()
	{
		f();
	}
	По этим исходным модулям при построении создаются объектные модули a.o и b.o
	Пусть теперь разработчик изменил заголовок ф-ции f(), например дабавив один параметр:
	
	void f(int n=0)
	{
	}
	Теперь для построения проекта нужно перекомпилировать муодли a.cpp и b.cpp.Возможны два варианта:
1.Разраб использовал повторное объявление ф-ции f() непосредственно в модуле b.cpp:
void f();

void g()
{
f();
}
В этом случае разработчик обязан исправить это объявление ф-ции f().Таким образом,он также изменяет модуль b.cpp. Инструмент построения обнаруживает, что время изменения b.cpp окажется позже времени изменения b.o,и также запустит 
команду перекомпиляции b.cpp
2.Разраб для удобства вынес объявление ф-ции f() в заголовок a.h(что на практике чаще всего используется):

void f();

При этом в файл b.cpp подключается a.h при помощи #include :

#include "a.h"

void g()
{
f();
}
При изменении заголовка ф-ци f() разраб теперь дложен также изменить файл a.h, однако файл b.cpp остается без изменений.Рзраб мог бы вручную установить время изменения файла b.cpp, однако в крупных программных проектах поиск всех 
зависимых файлов является сложной задачей.Здесь возможны два выхода:
-Указание в описании проекта того, что b.o зависит не только от b.cpp но и от a.h.Этот вариант не накладывает особых требований на инструмент построения, однако накладывает требования на разраба обязанность исправлять описание проекта 
каждый раз одновременно с добавлением/удалением очередной директивы #include 
-Требование от инструмента построения способности синтаксического разбора исходных модулей с целью автоматического определения подключенных файлов.

	Обзор инструментов построения проектов
Одним из первых инструментов построения появившийся в 1977 в ОС unix.В настоящее время инструмент является частью стандарта POSIX.Существует мноэество реализаций, в большей или меньшей степени совместимых со стандартом и двуг с другом.
Наиболее распространенная реализация это GNU make,входящая в состав систем на основе GNU/Linux.
	Инструмент представляет собой командной строки, которая при запуске ищет текстовый файл с описанием проекта(по умаолчанию Makefile) и осуществляет процесс построения в соответствии с записанным в нем правилами.В командной строке при 
вызове инструмента make можно указать основную цель.Некоторые команды, запускающие стандартные цели:
make
make install
make clean
	Правила построения инструмента make определяют, какой из выходных/промежуточных файлов зависит от каких других файлов и какую поледовательность команд (рецепт) необходимо запустить для создания этого файла.
	Возможно использование параметрихованных правил, при помощи которых можно определить зависимости сразу для целого класса файлов.Например, определить, каким образом можно получить люой объектный файл из cpp-файла с тем же базовым именем.Кроме 
файлов в качестве целей в правилах можно указать абстрактные цели, не связанные с конкретным файлом.
	Основными достоинствами make является:
-нетребовательность к вычислительным ресурсам:программа может выполняться в консольном режиме
-универсальность: при помощи языка make можно описать проект со сложными зависимостями и любыми правилами, требующими запуск инструментов командной строки
-настраиваемость:при правильном написании файлов проекта процесс построения можно легко настроить из командной строки, определив нужную версию компилятора, параметры компиляции и тд.
	autotools
	Autotools представляет собой набор инструментов для создания кроссплатформенных пакетов установки программного обеспечения, поставляемого в виде исходных кодов(так называемая система построения GNU-GNU Build system).Разработка инструментов 
autotools началась в 1991 в качестве системы построения для утилит gnu.Инструменты предназначены для решения проблемы различий в компиляторах, наборах стандартных заголовков и тд на различных системах.Сами по себе эти программы не являются инструментами 
автоматизации построения, однако они генерируют файл описания проекта для утилиты make.На вход им податеся описание проекта на более высокоуровневом языке, чем make.В результате их работы создаются, в частности, следующие файлы:
-configure-сценарий на яхыке cli burn shell, создаваемый утилитой autoconf, который собрает сведения о системе, необходимые для корректного построеня программного пакета
-makefile.in-шаблон файла описания проекта, создаваемый утилитой automake, при помощи которого сценарий configure генерирует Makefile.
-config.h.in-(необязательный) шаблон заголовочного файла, создаваемый утилитой autoheader, при помощи которого сценарий configure генерирует заголовочный файл config.h с определенными макросов,описывающих целевую систему(напримре, поддерживает ли компилятор
ту или инуювозможность, найжен ли заданный заголовок в составе комплятора, есть ли заданная ф-ция в стандартной библе и тд).Без этого файла макросы пришлось бы определять для использования в исходном коде при помощи параметров командной строки компилтяора, что 
при большом их количестве очень неудобно.Таким образом, наличия autotools в системе, на которой выполняется построение программного пакета, требуется.Пользователю достаточно выполнить следующие команды в оболочке:
cd <каталог,в котором находятся исходные коды>
./configure
make 
make install
	Во время работы сценарий configure запускает серию тестов, для некоторых из них он может пытаться скомпилировать короткие программы.Результаты тестов могут сохраняться в файле.
	qmake
	Инструмент qmake распространяется вместе с набором библиотек qt начиная с версии 3.0.Изначально он являлся переписанной на с++ версией tmake-сценария на языке perl, разработка которого началась в 1996.Основной причиной, вынудившей разработчиков qt создать 
собственный инструмент автоматизации построения, была недостаточная гибкость набора инструментов autotools.
	Также как и autotools, qmake не является системой построения в тсрогом понимании этого слова , он всего лишь генерирует файлы описания проектов для других систем

			|-------->visual studio(.sln,.vcxproj)
			|						
.pro ->qmake -------->Xcode
			|
			|________>Makefile
	
	На вход программе qmake подается описание проекта на высокоуровневом языке(один или несколько файлов с расширением .pro), в результате инструмент создает файл для 
системы make.Также возможно генерирование файлов и решений для иде.
	Интегрированная среда qt creator использует файлы .pro качестве файлов описания проекта.Однако в отличие от других сред разработки, среда поддерживает только визульное 
редактирование списка файлов проекта, но не его настроек.Для изменения настроек необходимо отредактировать файл проекта в текстовом редакторе.
	CMake
	CMake является свободным инструментом, освновным разрабом выступает kitware.Название системы расшифровывается как cross_platform make.Разработка cmake ведется с 1999, в качестве прототипа 
была использована утилита pcmaker, написанная в 1997 одним из авторов cmake.
	Принцип работы cmake аналогичен принципам qmake: из каталога исходных кодов считывается файл CMakeKists.txt с описанием проекта, на выходе cmake генерирует файлы проекта для одной из мн-ва 
конечных систем построения.
	Требования для сборки самого cmake включает наличие make и интепритатора сценариев на языке bash либо скомпилированного cmake одной из предыдущих версий , а также компилятора c++.При этом 
в исходниках cmake преднамеренно используются только возможности языка и станданртной библы, поддерживаемые достаточно старыми версиями компиляторов.Таким образом cmake переносим на блоьшое количество 
платформ.
					|---visual studio(.sln, .vcxproj)
					|	
					|---eclips
					|
CMakeKists.txt->cmake---code blocks
					|
					|---Makefile
					
	Следует отметить,что современные версии среды qt в дополнение к описаниям проектов на языке qmake также поддерживают язык cmake
	Система cmake управляется при помощи универсального процедурного языка.В то время как qmake позволяет в более простой форме выполнить описание проектов, использующих набор билиотек qt, при помощи cmake легче 
описывать проекты, которые используют другие библы и инструменты, а также решать нестандартные задачи, которые возникают при организации проесса построения.Основные возможности cmake, отсутствующие в qmake, включают 
в себя:
-простой интерфейс, для подключения библ, являющихся результатами построения одних целей, к дригим.Например, проект может включать цель библиотеки и использующего ее приложения.В cmake можно легко установить зависимость 
между такими целями, при этом к правилам построения приложения будут автомтически добавлены все необходимые настройки компилятора и компоновщика для подключения библы.
-команды и сценарии для поиска в системе наборов библиотек и/или инструментов(пакетов в терминалогии cmake).В состав cmake входит большое количество сценариев (модулей поиска) для наиболее популярных и распространенных 
в среде разрабов пакетов.Можно создать свои модули поиска на языке cmake.
-средства генирации исходных файлов и сценариев в процессе построения
	